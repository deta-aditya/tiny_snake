// Mocks generated by Mockito 5.1.0 from annotations
// in tiny_snake/test/model/game_loop_test.dart.
// Do not manually edit this file.

import 'dart:ui' as _i3;

import 'package:mockito/mockito.dart' as _i1;
import 'package:tiny_snake/model/game/i_game.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

/// A class which mocks [IGame].
///
/// See the documentation for Mockito's code generation for more information.
class MockIGame extends _i1.Mock implements _i2.IGame {
  MockIGame() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get isPaused =>
      (super.noSuchMethod(Invocation.getter(#isPaused), returnValue: false)
          as bool);
  @override
  bool get isGameLost =>
      (super.noSuchMethod(Invocation.getter(#isGameLost), returnValue: false)
          as bool);
  @override
  bool get isStarted =>
      (super.noSuchMethod(Invocation.getter(#isStarted), returnValue: false)
          as bool);
  @override
  int get period =>
      (super.noSuchMethod(Invocation.getter(#period), returnValue: 0) as int);
  @override
  bool get hasListeners =>
      (super.noSuchMethod(Invocation.getter(#hasListeners), returnValue: false)
          as bool);
  @override
  _i2.LoopResult loop() => (super.noSuchMethod(Invocation.method(#loop, []),
      returnValue: _i2.LoopResult.ok) as _i2.LoopResult);
  @override
  void addListener(_i3.VoidCallback? listener) =>
      super.noSuchMethod(Invocation.method(#addListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void removeListener(_i3.VoidCallback? listener) =>
      super.noSuchMethod(Invocation.method(#removeListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void dispose() => super.noSuchMethod(Invocation.method(#dispose, []),
      returnValueForMissingStub: null);
  @override
  void notifyListeners() =>
      super.noSuchMethod(Invocation.method(#notifyListeners, []),
          returnValueForMissingStub: null);
}
